{
  "hash": "ce654a4526e90f336a139541382528e2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Module 1.4\"\nsubtitle: \"Scatter Plot App UI\"\nformat: \n  html:\n    code-link: true\nhighlight-style: atom-one\nexecute:\n  echo: true\n  message: false\n  warning: false\n---\n\n\n::: {.callout-tip}\n## Prework\n\n- Read *Mastering Shiny*, [Chapter 2](https://mastering-shiny.org/basic-ui.html)\n:::\n\n## Overview\n\nIn this module we are going to continue our work on the scatter plot app by coding the basic elements of the user interface (UI). The **user interface (UI)** defines the layout and appearance of the web application. Here you tell Shiny what elements such as buttons, sliders, text inputs, plots, and other interactive components that you want users to be able to interact with.  \n\n## Coding the UI\n\n{{< video https://youtu.be/pTP4DC-riPI title = 'Scatter Plot App UI'>}}\n\nWe will start with the `fluidPage()` function as the outermost layer of our UI and then add additional container functions within it. First we will add a `titlePanel()`. You are free to call this app whatever you like but I thought a good title would be \"Democracy and Development.\" \n\nThen we can add a sidebar panel with dropdown menus to select the variables to display in the scatter plot. For this we call `sidebarLayout()` and then within that `sidebarPanel()`. \nThis next step is really important. We are going to use the list variables called `vars` from our setup code chunk to populate the dropdown menus. To do this we are going to call `selectInput()` twice--once for the x-axis variable that the user wants to appear on the scatter plot and once for the y-axis variable. \n\nThe three main arguments for this function are `input`, `label` and `choices`. `input` is the input ID that we will use to access the user selection later on in the server function. `label` refers to the name that we want to appear above the dropdown menu. And `choices` refers to the list of choices to appear in the dropdown (in our case the list of variables called `vars`.)\n\nWe can also include the argument `selected` in our `selectInput()` call to determine which variable is selected by default when the app loads. We are going to specify the sixth variable in the list for the y-axis (`vars[[6]]`) to make sure that the same two variables do not appear on both the x and y axes. \n\nThe final piece of our UI is the main panel where we want our scatter plot to appear. Let's go ahead and add `mainPanel()` and then within that call `plotOutput(\"scatterplot\")`. This is going to dynamically retrieve the updated scatter plot as the user changes the variables in the dropdown menu. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define UI for application that draws a scatter plot\nui <- fluidPage(\n\n    # Application title\n    titlePanel(\"Democracy and Development\"),\n\n    # Sidebar with a two dropdown menus\n    sidebarLayout(\n      sidebarPanel(\n        selectInput(input = 'xcol', label = 'X Variable', choices = vars),\n        selectInput(input = 'ycol', label = 'Y Variable', \n                    choices = vars, selected = vars[[6]])\n      ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"scatterplot\")\n        )\n    )\n)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}