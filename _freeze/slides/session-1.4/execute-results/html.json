{
  "hash": "22aa38e5c321e5213f58e5913d69788a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"WebApps 6502\"\nsubtitle: \"Session 1.4--Scatter Plot App, Part 2\"\nfooter: \"[WebApps Website](https://rshiny-is.cool)\"\nlogo: images/webapps-logo.png\nformat:\n  revealjs:\n    theme: [simple, custom.scss]\n    transition: fade\n    slide-number: true\n    chalkboard: true\nexecute:\n  echo: true\n  eval: false\n  freeze: auto\n---\n\n\n# Overview\n\n## Idea for the App\n\n<iframe src=\"https://emmanuelteitelbaum.shinyapps.io/vdem-scatter-plot/\" width=\"780\" height=\"500\" data-external=\"1\"></iframe>\n\n## Plan\n\n- **Step 1:** Wrangle Data (done) \n- **Step 2:** Code up a scatter plot with two variables (done)\n- **Step 3:** Code UI with a title panel, sidebar with two dropdowns, and a main panel with the scatter plot output\n- **Step 4:** Code Server with reactive expressions to filter data and render the scatter plot\n- **Step 5:** Call the Shiny App (don't forget!)\n\n# App Setup\n\n## Preliminaries\n\n- Start a new Shiny Web App\n- Name the app something like `vdem-scatter-plot`\n- Start a new R script in the folder that was created\n  - Name the script something like `wrangle.R` \n- Use this file for the code in the next slide\n\n## Save the Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(readr)\nlibrary(vdemdata)\n\ndem_data <- vdem |>\n  filter(year == 2000) |>\n  select(\n    country = country_name, \n    polyarchy = v2x_polyarchy,\n    clientelism = v2xnp_client,\n    corruption = v2xnp_regcorr,\n    womens_emp = v2x_gender,\n    gdp_pc = e_gdppc,\n    inf_mort = e_peinfmor,\n    life_exp = e_pelifeex,\n    education = e_peaveduc,\n    region = e_regionpol_6C \n  ) |>   mutate(\n    region = case_match(region, \n                        1 ~ \"Eastern Europe\", \n                        2 ~ \"Latin America\",  \n                        3 ~ \"Middle East\",   \n                        4 ~ \"Africa\", \n                        5 ~ \"The West\", \n                        6 ~ \"Asia\")\n  )\n\n# glimpse(dem_data)\n\nwrite_csv(dem_data, \"dem_data.csv\")\n```\n:::\n\n\n## Make the Setup Chunk {.smaller}\n\nIn the app.R file, use this code for the global section of the app... \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages\nlibrary(shiny)\nlibrary(readr)\nlibrary(ggplot2)\n\n# load the data \ndem_data <- read_csv(\"dem_data.csv\")\n\n# create list of named values for the input selection\nvars <- c(\"Democracy\" = \"polyarchy\",\n          \"Clientelism\" = \"clientelism\",\n          \"Corruption\" = \"corruption\",\n          \"Women's Empowerment\" = \"womens_emp\",\n          \"Wealth\" = \"gdp_pc\",\n          \"Infant Mortality\" = \"inf_mort\",\n          \"Life Expectancy\" = \"life_exp\", \n          \"Education\" = \"education\")\n```\n:::\n\n\n# The User Interface (`ui`)\n\n## The UI Code {.smaller}\n\nCopy and paste the UI code into the app.R file...\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define UI for application that draws a scatter plot\nui <- fluidPage(\n\n    # Application title\n    titlePanel(\"Democracy and Development\"),\n\n    # Sidebar with a two dropdown menus\n    sidebarLayout(\n      sidebarPanel(\n        selectInput(input = 'xcol', label = 'X Variable', choices = vars),\n        selectInput(input = 'ycol', label = 'Y Variable', \n                    choices = vars, selected = vars[[6]])\n      ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"scatterplot\")\n        )\n    )\n)\n```\n:::\n\n\n## The UI Code {.smaller}\n\nAdds the the title panel... \n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5\"}\n# Define UI for application that draws a scatter plot\nui <- fluidPage(\n\n    # Application title\n    titlePanel(\"Democracy and Development\"),\n\n    # Sidebar with a two dropdown menus\n    sidebarLayout(\n      sidebarPanel(\n        selectInput(input = 'xcol', label = 'X Variable', choices = vars),\n        selectInput(input = 'ycol', label = 'Y Variable', \n                    choices = vars, selected = vars[[6]])\n      ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"scatterplot\")\n        )\n    )\n)\n```\n:::\n\n\n## The UI Code {.smaller}\n\nDefines the sidebar layout with the two dropdown panels... \n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"8-13\"}\n# Define UI for application that draws a scatter plot\nui <- fluidPage(\n\n    # Application title\n    titlePanel(\"Democracy and Development\"),\n\n    # Sidebar with a two dropdown menus\n    sidebarLayout(\n      sidebarPanel(\n        selectInput(input = 'xcol', label = 'X Variable', choices = vars),\n        selectInput(input = 'ycol', label = 'Y Variable', \n                    choices = vars, selected = vars[[6]])\n      ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"scatterplot\")\n        )\n    )\n)\n```\n:::\n\n\n## The UI Code {.smaller}\n\nDefines the main panel for the output. Note that we are calling `plotOutput()` and that we are calling the output \"scatterplot\" (the unique `outputID` for our plot)... \n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"15-17\"}\n# Define UI for application that draws a scatter plot\nui <- fluidPage(\n\n    # Application title\n    titlePanel(\"Democracy and Development\"),\n\n    # Sidebar with a two dropdown menus\n    sidebarLayout(\n      sidebarPanel(\n        selectInput(input = 'xcol', label = 'X Variable', choices = vars),\n        selectInput(input = 'ycol', label = 'Y Variable', \n                    choices = vars, selected = vars[[6]])\n      ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"scatterplot\")\n        )\n    )\n)\n```\n:::\n\n\n# The Server (`server`)\n\n## The Server Code {.smaller}\n\nCopy and paste the server code into the app.R file...\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define server logic required to draw a scatter plot\nserver <- function(input, output, session) {\n  \n  # Render the plot\n  output$scatterplot <- renderPlot({\n    \n    # ggplot call\n    ggplot(dem_data, aes(x = .data[[input$xcol]], y = .data[[input$ycol]])) +\n      geom_point(aes(color = region)) +\n      geom_smooth(method = \"loess\") +\n      scale_color_viridis_d(option = \"plasma\") +\n      theme_minimal() +\n      labs(\n        x =  names(vars[which(vars == input$xcol)]), # select names in vars that\n        y =  names(vars[which(vars == input$ycol)]), # match input selections\n        caption = \"Source: V-Dem Institute\",\n        color = \"Region\"\n      )\n  })\n}\n```\n:::\n\n\n## The Server Code {.smaller}\n\nNote that we are calling `renderPlot()`, which matches up with the `plotOutput()` in the UI. And we are referencing output as \"scatterplot\" (again, the unique `outputID` for our plot)... \n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5\"}\n# Define server logic required to draw a scatter plot\nserver <- function(input, output, session) {\n  \n  # Render the plot\n  output$scatterplot <- renderPlot({\n    \n    # ggplot call\n    ggplot(dem_data, aes(x = .data[[input$xcol]], y = .data[[input$ycol]])) +\n      geom_point(aes(color = region)) +\n      geom_smooth(method = \"loess\") +\n      scale_color_viridis_d(option = \"plasma\") +\n      theme_minimal() +\n      labs(\n        x =  names(vars[which(vars == input$xcol)]), # select names in vars that\n        y =  names(vars[which(vars == input$ycol)]), # match input selections\n        caption = \"Source: V-Dem Institute\",\n        color = \"Region\"\n      )\n  })\n}\n```\n:::\n\n\n## The Server Code {.smaller}\n\nWe dynamically reference the input values from the dropdown menus in the UI. We use `input$xcol` and `input$ycol` to reference the user-selected variables. As a result of [tidy evaluation](https://dplyr.tidyverse.org/articles/programming.html) in ggplot2, these inputs have to be referenced in .data[[]] in order to work....  \n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"8\"}\n# Define server logic required to draw a scatter plot\nserver <- function(input, output, session) {\n  \n  # Render the plot\n  output$scatterplot <- renderPlot({\n    \n    # ggplot call\n    ggplot(dem_data, aes(x = .data[[input$xcol]], y = .data[[input$ycol]])) +\n      geom_point(aes(color = region)) +\n      geom_smooth(method = \"loess\") +\n      scale_color_viridis_d(option = \"plasma\") +\n      theme_minimal() +\n      labs(\n        x =  names(vars[which(vars == input$xcol)]), # select names in vars that\n        y =  names(vars[which(vars == input$ycol)]), # match input selections\n        caption = \"Source: V-Dem Institute\",\n        color = \"Region\"\n      )\n  })\n}\n```\n:::\n\n\n## The Server Code {.smaller}\n\nHere we need to select the variable from the vector `vars` that created with the list of variables. We use `which(vars == input$xcol)` to find the index of the selected variable in the vector `vars`. We then use `names()` to get the name of the variable at that index... \n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"14-15\"}\n# Define server logic required to draw a scatter plot\nserver <- function(input, output, session) {\n  \n  # Render the plot\n  output$scatterplot <- renderPlot({\n    \n    # ggplot call\n    ggplot(dem_data, aes(x = .data[[input$xcol]], y = .data[[input$ycol]])) +\n      geom_point(aes(color = region)) +\n      geom_smooth(method = \"loess\") +\n      scale_color_viridis_d(option = \"plasma\") +\n      theme_minimal() +\n      labs(\n        x =  names(vars[which(vars == input$xcol)]), # select names in vars that\n        y =  names(vars[which(vars == input$ycol)]), # match input selections\n        caption = \"Source: V-Dem Institute\",\n        color = \"Region\"\n      )\n  })\n}\n```\n:::\n\n\n# Call the App\n\n## Run the App\n\nTo display the app, don't forget this final line of code... \n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Run the application \nshinyApp(ui = ui, server = server)\n```\n:::\n\n\n## Your Turn! \n\n- Run the app and select different variables from the drop down menus.\n- What do you notice about the relationship between democracy and development?\n- How could you potentially improve the app?\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer1\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Publish Your App\n\n- Install rsconnect:`install.packages(\"rsconnect\")`\n- Create account and retrieve your API key\n- Configure RStudio:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rsconnect)\nrsconnect::setAccountInfo(name='<account-name>', token='<account-token>', secret='<secret>')\n```\n:::\n\n- Click the \"Publish\" button in RStudio toolbar and follow prompts\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer2\" data-update-every=\"1\" tabindex=\"0\" style=\"top:5%;right:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}