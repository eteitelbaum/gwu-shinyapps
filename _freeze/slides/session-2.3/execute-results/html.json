{
  "hash": "fa07636f9bec3e1c868cfb69420add97",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"WebApps 6502\"\nsubtitle: \"Session 2.3--Building Your App\"\nfooter: \"[WebApps Website](https://rshiny-is.cool)\"\nlogo: images/webapps-logo.png\nformat:\n  revealjs:\n    theme: [simple, custom.scss]\n    transition: fade\n    slide-number: true\n    chalkboard: true\nexecute:\n  echo: true\n  eval: false\n  freeze: auto\n---\n\n\n# Styling Your App\n\n# Looks Matter! ðŸŽ¨\n\n## Quickly Leveling Up Your UI\n\n- There are many ways to make your app look instantly better\n- One of them is using `bslib` which is a package that provides a modern UI toolkit for Shiny and R Markdown based on Bootstrap\n- The cool thing: you can get around Shiny's default usage of Bootstrap version 3!\n\n## Working with {bslib}\n\n```{.r code-line-numbers=\"2,4-7\"}\nlibrary(shiny)\nlibrary(bslib)\n\nui <- page_navbar(\n  theme = bs_theme(version = 5),\n  title = \"Modular App Blueprint\",\n  nav_panel(\n    title = \"Numbers\",\n    numericInput(inputId = \"number\",\n                 label = \"Enter a number\",\n                 value = 0),\n    actionButton(inputId = \"button\",\n                 label = \"Click me\"),\n    textOutput(outputId = \"text\")\n  )\n)\n\nserver <- function(input, output, session) {\n  output$text <- renderText({\n    input$number^2\n  }) |> bindEvent(input$button)\n}\n\nshinyApp(ui, server)\n```\n\n## Working with {bslib}\n\nUse the `bootswatch` argument to change the theme (other [bootswatch themes](https://bootswatch.com/):\n\n```{.r code-line-numbers=\"5\"}\nlibrary(shiny)\nlibrary(bslib)\n\nui <- page_navbar(\n  theme = bs_theme(version = 5, bootswatch = \"minty\"),\n  title = \"Modular App Blueprint\",\n  nav_panel(\n    title = \"Numbers\",\n    numericInput(inputId = \"number\",\n                 label = \"Enter a number\",\n                 value = 0),\n    actionButton(inputId = \"button\",\n                 label = \"Click me\"),\n    textOutput(outputId = \"text\")\n  )\n)\n\nserver <- function(input, output, session) {\n  output$text <- renderText({\n    input$number^2\n  }) |> bindEvent(input$button)\n}\n\nshinyApp(ui, server)\n```\n\n## Working with {bslib}\n\nYou can also customize the theme:\n\n```{.r code-line-numbers=\"4-14,17\"}\nlibrary(shiny)\nlibrary(bslib)\n\ncustom_theme <- bs_theme(\n  version = 5,\n  bg = \"#F9F9F9\",\n  fg = \"#003f5c\",\n  primary = \"#bc5090\",\n  secondary = \"#58508d\",\n  warning = \"#ffa600\",\n  danger = \"#ff6361\",\n  info = \"#0091d5\",\n  base_font = font_google(\"PT Sans\")\n)\n\nui <- page_navbar(\n  theme = custom_theme,\n  title = \"Modular App Blueprint\",\n  nav_panel(\n    title = \"Numbers\",\n    numericInput(inputId = \"number\",\n                 label = \"Enter a number\",\n                 value = 0),\n    actionButton(inputId = \"button\",\n                 label = \"Click me\",\n                 width = \"100px\"),\n    textOutput(outputId = \"text\")\n  )\n)\n\nserver <- function(input, output, session) {\n  output$text <- renderText({\n    input$number^2\n  }) |> bindEvent(input$button)\n}\n\nshinyApp(ui, server)\n```\n\n## Your Turn!\n\n- Take the toy app from this section or another one you have made\n- Add some styling to it using `bslib`\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer1\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n# Shiny Dashboards\n\n## What is a Dashboard?\n\n- A dashboard combines multiple visualizations into a single page\n- It provides a high-level overview of the data\n- Here is an [example](https://emmanuelteitelbaum.shinyapps.io/vdem-dashboard) of a dashboard I made using the `shinydashboard` package\n\n# Debugging Your App\n\n## The hard part about Shiny\n\nNote that the server part doesn't run line-by-line. It's a reactive environment that will run the code when input changes.\n\n<br>\n\nCode only reacts when it needs to, which is why it's called **reactive programming**.\n\n<br>\n\nThis makes it hard to test your code. And it's hard to understand what's going on when you're new to Shiny!\n\n## The hard part about Shiny\n\nMy personal top ways ways to get more insight into what's going on:\n\n1. Use `print()` statements to see when something is happening\n2. Use `browser()` to stop the code and inspect the environment (just as you can do within functions, because that is literally what `server` is!)\n\n## `print()` example\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3-11\"}\nserver <- function(input, output) {\n  \n    # Reactive function to fetch data\n    fred_indicator <- reactive({\n      data <- fredr(series_id = input$indicator,\n                    observation_start = start_date,\n                    observation_end = end_date)\n      print(paste(\"Data fetched for indicator:\", input$indicator))  # Debug statement\n      print(head(data))  # Print first few rows of the fetched data\n      data\n    })\n  \n    # Reactive function to filter data\n    fred_data <- reactive({\n      data <- fred_indicator() |> \n              filter(between(date, input$range[1], input$range[2]))\n      print(paste(\"Data filtered for range:\", input$range[1], \"to\", input$range[2]))  # Debug statement\n      data\n    })\n\n    # Plotting function\n    output$lineChart <- renderPlot({\n      data <- fred_data()\n      print(\"Plotting data\")  # Debug statement before plotting\n      ggplot(data, aes(x = date, y = value)) + \n        geom_line(color = \"navyblue\") +\n        labs(x = \"\", y = names(vars[which(vars == input$indicator)])) +\n        theme_minimal()\n    })\n}\n```\n:::\n\n\n## `print()` example\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"13-19\"}\nserver <- function(input, output) {\n  \n    # Reactive function to fetch data\n    fred_indicator <- reactive({\n      data <- fredr(series_id = input$indicator,\n                    observation_start = start_date,\n                    observation_end = end_date)\n      print(paste(\"Data fetched for indicator:\", input$indicator))  # Debug statement\n      print(head(data))  # Print first few rows of the fetched data\n    })\n  \n    # Reactive function to filter data\n    fred_data <- reactive({\n      data <- fred_indicator() |> \n              filter(between(date, input$range[1], input$range[2]))\n      print(paste(\"Data filtered for range:\", input$range[1], \"to\", input$range[2]))  # Debug statement\n      data\n    })\n\n    # Plotting function\n    output$lineChart <- renderPlot({\n      data <- fred_data()\n      print(\"Plotting data\")  # Debug statement before plotting\n      ggplot(data, aes(x = date, y = value)) + \n        geom_line(color = \"navyblue\") +\n        labs(x = \"\", y = names(vars[which(vars == input$indicator)])) +\n        theme_minimal()\n    })\n}\n```\n:::\n\n\n## `browser()` example\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3-9|11-17|18-25\"}\nserver <- function(input, output) {\n  \n    # Reactive function to fetch data\n    fred_indicator <- reactive({\n      browser()  # Initiate debugging here\n      fredr(series_id = input$indicator,\n            observation_start = start_date,\n            observation_end = end_date)\n    })\n  \n    # Reactive function to filter data\n    fred_data <- reactive({\n      browser()  # Debugging point to inspect filtered data\n      fred_indicator() |> \n        filter(between(date, input$range[1], input$range[2]))\n    })\n\n    # Plotting function\n    output$lineChart <- renderPlot({\n      browser()  # Inspect before plotting\n      ggplot(fred_data(), aes(x = date, y = value)) + \n        geom_line(color = \"navyblue\") +\n        labs(x = \"\", y = names(vars[which(vars == input$indicator)])) +\n        theme_minimal()\n    })\n}\n```\n:::\n\n\n## Your Turn!\n\n- Take the toy app from this section or another one you have made\n- Try adding `print()` or `browser()` statements to see when things are happening\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer2\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n# More App-Building Tips\n\n## Wrangle some \"working data\"\n\n- Start by selecting a manageable subset of data.\n- Focus on a few indicators for initial testing.\n- Expand data scope after validating app functionality.\n\n## Use separate files\n\n- Separate data wrangling and visualization into different R scripts or Quarto documents.\n- Employ `glimpse()` and `View()` to verify data structures.\n- Helps isolate and troubleshoot errors effectively.\n\n## Start building with comments and function calls\n\n- Use comments to outline what each code section should do.\n- Introduce function calls without arguments to build the structure.\n- This method helps in maintaining clarity and debugging.\n\n## Test your UI code separately from your server code\n\n- Test UI components like drop-downs and sliders without server-side logic.\n- Helps ensure that the UI layout functions as intended.\n- Use dummy server functions to isolate UI issues.\n\n## Ensure reactive data frames are called correctly\n\n- Use parentheses to call reactive data frames within server functions.\n- Essential for maintaining reactivity and accurate data handling.\n- Avoids common bugs related to reactive contexts.\n\n## Properly call input in server functions\n\n- Check that input variables are used correctly in server functions.\n- Accurate naming ensures the server reacts properly to UI changes.\n- Critical for dynamic app behavior and user interactions.\n\n## Consider nonstandard evaluation in `ggplot`\n\n- Use `.data[[]]` to handle user inputs within `ggplot2` aesthetics.\n- Ensures dynamic plotting based on user-selected data.\n- Nonstandard evaluation simplifies coding but requires careful handling.\n\n## Understand what your code is doing\n\n- Maintain a clear concept of each part's function within your code.\n- Regularly test and refine to ensure it meets your objectives.\n- Theoretical understanding aids in effective troubleshooting and innovation.\n\n## Acknowledgements\n\n- Parts of this presentation were adapted from Veerle van Leemput's [Shiny 101: The Modular App Blueprint](https://github.com/hypebright/shinyconf2024-shiny101)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}